#
# Copyright (c) 2013 Juniper Networks, Inc. All rights reserved.
#
# -*- mode: python; -*-

import re

Import('BuildEnv')
env = BuildEnv.Clone()

# Versions of gcc < 4.4 do not support 'pragma diagnostic'
if env['CC'] == 'gcc':
    version = env['CCVERSION'].split('.')
    gcc_major = int(version[0])
    gcc_minor = int(version[1])
    if gcc_major < 4 or (gcc_major == 4 and gcc_minor < 4):
        cflags = env['CCFLAGS']
        cflags.append('-Wno-unused-function')
# end

env['CCFLAGS'].append('-DRAPIDJSON_NAMESPACE=contrail_rapidjson')

rapidjson_headers = [
    'rapidjson/stream.h',
    'rapidjson/istreamwrapper.h',
    'rapidjson/memorybuffer.h',
    'rapidjson/prettywriter.h',
    'rapidjson/memorystream.h',
    'rapidjson/ostreamwrapper.h',
    'rapidjson/encodedstream.h',
    'rapidjson/pointer.h',
    'rapidjson/stringbuffer.h',
    'rapidjson/writer.h',
    'rapidjson/allocators.h',
    'rapidjson/filewritestream.h',
    'rapidjson/reader.h',
    'rapidjson/fwd.h',
    'rapidjson/encodings.h',
    'rapidjson/document.h',
    'rapidjson/schema.h',
    'rapidjson/filereadstream.h',
    'rapidjson/rapidjson.h',
    'rapidjson/internal/biginteger.h',
    'rapidjson/internal/diyfp.h',
    'rapidjson/internal/dtoa.h',
    'rapidjson/internal/ieee754.h',
    'rapidjson/internal/itoa.h',
    'rapidjson/internal/meta.h',
    'rapidjson/internal/pow10.h',
    'rapidjson/internal/regex.h',
    'rapidjson/internal/stack.h',
    'rapidjson/internal/strfunc.h',
    'rapidjson/internal/strtod.h',
    'rapidjson/internal/swap.h',
    'rapidjson/error/error.h',
    'rapidjson/error/en.h',
    'rapidjson/msinttypes/inttypes.h',
    'rapidjson/msinttypes/stdint.h',

]

rapidjson_targets = \
    map(lambda path: '#build/include/' + path, rapidjson_headers)
targets = env.IFMapAutogen('vnc_cfg.xsd')
#env.Depends(targets, rapidjson_targets)
lib_srcs = filter(lambda x: re.match(r'(.*)\.cc$', x.abspath), targets)
lib = env.Library('ifmap_vnc', lib_srcs)

targets = env.IFMapAutogen('bgp_schema.xsd')
lib_srcs = filter(lambda x: re.match(r'(.*)\.cc$', x.abspath), targets)
lib = env.Library('bgp_schema', lib_srcs)

targets = env.TypeAutogen('xmpp_unicast.xsd')
lib_srcs = filter(lambda x: re.match(r'(.*)\.cc$', x.abspath), targets)
lib = env.Library('xmpp_unicast', lib_srcs)

targets = env.TypeAutogen('xmpp_multicast.xsd')
lib_srcs = filter(lambda x: re.match(r'(.*)\.cc$', x.abspath), targets)
lib = env.Library('xmpp_multicast', lib_srcs)

targets = env.TypeAutogen('xmpp_enet.xsd')
lib_srcs = filter(lambda x: re.match(r'(.*)\.cc$', x.abspath), targets)
lib = env.Library('xmpp_enet', lib_srcs)

targets = env.TypeAutogen('services.xsd')
lib_srcs = filter(lambda x: re.match(r'(.*)\.cc$', x.abspath), targets)
lib = env.Library('services', lib_srcs)

env.SConscript('test/SConscript', exports='BuildEnv', duplicate = 0)
